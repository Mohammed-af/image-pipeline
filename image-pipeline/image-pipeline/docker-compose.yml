version: '3.8'

services:
  # Zookeeper for Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - pipeline-net

  # Kafka Message Broker
  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    networks:
      - pipeline-net

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: postgres
    environment:
      POSTGRES_DB: imagedb
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres123
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    networks:
      - pipeline-net

  # MinIO Object Storage
  minio:
    image: minio/minio:latest
    container_name: minio
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin123
    command: server /data --console-address ":9001"
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio-data:/data
    networks:
      - pipeline-net

  # Initialize MinIO bucket
  minio-init:
    image: minio/mc:latest
    depends_on:
      - minio
    entrypoint: >
      /bin/sh -c "
      sleep 5;
      mc alias set myminio http://minio:9000 minioadmin minioadmin123;
      mc mb --ignore-existing myminio/images;
      mc policy set public myminio/images;
      exit 0;
      "
    networks:
      - pipeline-net

  # Etcd for Milvus
  etcd:
    image: quay.io/coreos/etcd:v3.5.5
    container_name: milvus-etcd
    environment:
      - ETCD_AUTO_COMPACTION_MODE=revision
      - ETCD_AUTO_COMPACTION_RETENTION=1000
      - ETCD_QUOTA_BACKEND_BYTES=4294967296
    volumes:
      - etcd-data:/etcd
    command: etcd -advertise-client-urls=http://127.0.0.1:2379 -listen-client-urls http://0.0.0.0:2379 --data-dir /etcd
    networks:
      - pipeline-net

  # Milvus Vector Database (Standalone mode)
  milvus:
    image: milvusdb/milvus:v2.3.3
    container_name: milvus
    depends_on:
      - etcd
      - minio
    environment:
      ETCD_ENDPOINTS: etcd:2379
      MINIO_ADDRESS: minio:9000
      MINIO_ACCESS_KEY_ID: minioadmin        
      MINIO_SECRET_ACCESS_KEY: minioadmin123 
    ports:
      - "19530:19530"
      - "9091:9091"
    volumes:
      - milvus-data:/var/lib/milvus
    command: milvus run standalone
    networks:
      - pipeline-net
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9091/healthz"]
      interval: 30s
      timeout: 20s
      retries: 3

  # Milvus initialization (create collection)
  milvus-init:
    build: ./milvus-init
    container_name: milvus-init
    depends_on:
      - milvus
    environment:
      MILVUS_HOST: milvus
      MILVUS_PORT: 19530
      FASTAPI_URL: http://host.docker.internal:8003
    networks:
      - pipeline-net
    extra_hosts:
      - "host.docker.internal:host-gateway"

  # Python Producer with FastAPI integration
  python-producer:
    build: ./python-producer
    container_name: python-producer
    depends_on:
      - kafka
    environment:
      KAFKA_BROKER: kafka:29092
      FASTAPI_URL: http://host.docker.internal:8003
      SOURCE_DIR: /app/images
    volumes:
      - ./images:/app/images:ro
    networks:
      - pipeline-net
    extra_hosts:
      - "host.docker.internal:host-gateway"

  # Enhanced Rust Backend with Milvus support
  rust-backend:
    build: ./rust-backend
    container_name: rust-backend
    depends_on:
      - kafka
      - postgres
      - minio
      - milvus
    environment:
      KAFKA_BROKER: kafka:29092
      DATABASE_URL: postgresql://postgres:postgres123@postgres/imagedb
      MINIO_ENDPOINT: http://minio:9000
      AWS_ACCESS_KEY_ID: minioadmin
      AWS_SECRET_ACCESS_KEY: minioadmin123
      AWS_REGION: us-east-1
      MILVUS_HOST: milvus
      MILVUS_PORT: 19530
      RUST_LOG: rust_backend=info
    ports:
      - "3000:3000"
    networks:
      - pipeline-net
    restart: unless-stopped

volumes:
  postgres-data:
  minio-data:
  milvus-data:
  etcd-data:

networks:
  pipeline-net:
    driver: bridge
